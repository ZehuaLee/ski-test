/*
 * Copyright (c) 2012-2013 ARM Limited
 * All rights reserved.
 *
 * The license below extends only to copyright in the software and shall
 * not be construed as granting a license to any other intellectual
 * property including but not limited to intellectual property relating
 * to a hardware implementation of the functionality of the software
 * licensed hereunder.  You may use the software subject to the license
 * terms below provided that you ensure that this notice is replicated
 * unmodified and in its entirety in all distributions of the software,
 * modified or unmodified, in source code or in binary form.
 *
 * Copyright (c) 2003-2005,2014 The Regents of The University of Michigan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Erik Hallnor
 */

/**
 * @file
 * Definitions of a LRU tag store.
 */

//added from L59, L75

#include "mem/cache/tags/lru.hh"

#include "base/callback.hh"
#include "base/output.hh"
#include "debug/CacheRepl.hh"
#include "mem/cache/base.hh"

LRU::LRU(const Params *p)
    : BaseSetAssoc(p)
 ht{
  //new start
  o_justbefore = simout.openFile(simout.directory() + name() + ".hit_or_evict.txt"); 
  *o_justbefore << "#hit,evict" << std::endl;
  hit_z=0;
  evict_z=0;
  //  o_distcount = simout.openFile(simout.directory() + name() + ".evict_locality.txt");
  // *o_distcount << "#distance[cycle],NumberOfEntry" << std::endl;
  o_LRUcount = simout.openFile(simout.directory() + name() + ".LRUcount.txt");
  *o_LRUcount << "#LRUstate, hit_count" << std::endl;
  Callback* cb = new MakeCallback<LRU,&LRU::printLRUcount>(this);
  registerExitCallback(cb);
  // Callback* cb = new MakeCallback<LRU,&LRU::printLRUcount>(this);
  // registerExitCallback(cb);

  // for(int i=0;i<8192;i++)
  //   {
  //     SetIndex[i] = false;
  //   }
  // entry = 0;
  // targetAddr = 0;

  // for(int i=0;i<32;i++)
  //   {
  //     LRUcount[i]=0;
  //   }
  //new end
}
//new_start
/*
void
LRU::opeSetIndex(Addr addr)
{
  //obtain set
  targetAddr = (addr >> 7) & 8191;
  //if set matches, entry--. Otherwise, entry++.
  if(SetIndex[targetAddr] == false) //empty
    {
      SetIndex[targetAddr] = true;
      entry++;
      *o_distcount << curTick() << ',' << entry <<  std::endl;
    }
  else //filled
    {
      SetIndex[targetAddr] = false;
      entry--;
      *o_distcount << curTick() << ',' << entry <<  std::endl;
    }
}
*/

void
LRU::printLRUcount()
{
  for(int i=0;i<32;i++)
    {
      *o_LRUcount << i << ',' << LRUcount[i] << std::endl;
    }
  *o_justbefore << hit_z << ',' << evict_z << std::endl;
}

//new_end
CacheBlk*
LRU::accessBlock(Addr addr, bool is_secure, Cycles &lat, int master_id, bool is_read)
{
  CacheBlk *blk = BaseSetAssoc::accessBlock(addr, is_secure, lat, master_id, is_read);
  
  if (blk != NULL) {
    //new_start
    lrustate_z = sets[blk->set].getLRUState(blk);
    LRUcount[lrustate_z]++;
    state6nohit.erase(addr);
    hit_z++;
    //new_end

    // move this block to head of the MRU list
    sets[blk->set].moveToHead(blk);
    DPRINTF(CacheRepl, "set %x: moving blk %x (%s) to MRU\n",
	    blk->set, regenerateBlkAddr(blk->tag, blk->set),
	    is_secure ? "s" : "ns");
  }
  return blk;
}

CacheBlk*
LRU::findVictim(Addr addr)
{
    int set = extractSet(addr);
    BlkType *blk = sets[set].blks[assoc - 1];
    //new_start
    //insert lrublock to set
    BlkType *blktemp = sets[set].blks[assoc - 2];
    state6nohit.insert(regenerateBlkAddr(blktemp->tag, set));
  
    itr = state6nohit.find(regenerateBlkAddr(blk->tag, set));
    if(itr != state6nohit.end())
      {
	state6nohit.erase(regenerateBlkAddr(blk->tag,set));
	evict_z++;
      }
    //new_end
    if (blk->isValid()) {
        DPRINTF(CacheRepl, "set %x: selecting blk %x for replacement\n",
                set, regenerateBlkAddr(blk->tag, set));
    }
    return blk;
}

void
LRU::insertBlock(PacketPtr pkt, BlkType *blk)
{
    BaseSetAssoc::insertBlock(pkt, blk);

    int set = extractSet(pkt->getAddr());
    sets[set].moveToHead(blk);
    //new_start
    //    opeSetIndex(pkt->getAddr());
    //new_end
}

void
LRU::invalidate(CacheBlk *blk)
{
    BaseSetAssoc::invalidate(blk);

    // should be evicted before valid blocks
    int set = blk->set;
    sets[set].moveToTail(blk);
}
//new_start
/*
void
LRU::printleft()
{
  std::map<long,long>::iterator idistcount;
  for(idistcount = distcount.begin();idistcount != distcount.end();idistcount++)
    {
      *o_distcount << idistcount->first << ',' << idistcount->second << std::endl;
    }
}
bool
LRU::insertAddr2MB(long SetIndex, Addr addr)
{

}
*/
//new_end

LRU*
LRUParams::create()
{
    return new LRU(this);
}
